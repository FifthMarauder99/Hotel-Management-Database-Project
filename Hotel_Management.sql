-- Database: hotel_management

CREATE DATABASE hotel_management;
USE hotel_management;

-- Table: Guests
CREATE TABLE Guests (
    guest_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    phone VARCHAR(15),
    address TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table: Rooms
CREATE TABLE Rooms (
    room_id INT AUTO_INCREMENT PRIMARY KEY,
    room_number VARCHAR(10) NOT NULL UNIQUE,
    type VARCHAR(50) NOT NULL,
    capacity INT NOT NULL,
    price_per_night DECIMAL(10, 2) NOT NULL,
    status ENUM('available', 'occupied', 'maintenance') DEFAULT 'available'
);

-- Table: Reservations
CREATE TABLE Reservations (
    reservation_id INT AUTO_INCREMENT PRIMARY KEY,
    guest_id INT,
    room_id INT,
    check_in_date DATE NOT NULL,
    check_out_date DATE NOT NULL,
    status ENUM('booked', 'checked_in', 'checked_out', 'cancelled') DEFAULT 'booked',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (guest_id) REFERENCES Guests(guest_id),
    FOREIGN KEY (room_id) REFERENCES Rooms(room_id)
);

-- Table: Services
CREATE TABLE Services (
    service_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL
);

-- Table: Service_Usage
CREATE TABLE Service_Usage (
    usage_id INT AUTO_INCREMENT PRIMARY KEY,
    reservation_id INT,
    service_id INT,
    quantity INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (reservation_id) REFERENCES Reservations(reservation_id),
    FOREIGN KEY (service_id) REFERENCES Services(service_id)
);

-- Table: Payments
CREATE TABLE Payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    reservation_id INT,
    amount DECIMAL(10, 2) NOT NULL,
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    payment_method ENUM('cash', 'credit_card', 'debit_card', 'online') NOT NULL,
    FOREIGN KEY (reservation_id) REFERENCES Reservations(reservation_id)
);


-- Insert data into Guests
INSERT INTO Guests (first_name, last_name, email, phone, address) VALUES
('John', 'Doe', 'john.doe@example.com', '123-456-7890', '123 Elm St, Springfield, IL'),
('Jane', 'Smith', 'jane.smith@example.com', '987-654-3210', '456 Oak St, Springfield, IL');

-- Insert data into Rooms
INSERT INTO Rooms (room_number, type, capacity, price_per_night) VALUES
('101', 'Single', 1, 100.00),
('102', 'Double', 2, 150.00),
('201', 'Suite', 4, 300.00);

-- Insert data into Services
INSERT INTO Services (name, description, price) VALUES
('Room Service', 'In-room dining', 20.00),
('Spa', 'Full-body massage', 50.00);

-- Insert data into Reservations
INSERT INTO Reservations (guest_id, room_id, check_in_date, check_out_date) VALUES
(1, 1, '2024-06-01', '2024-06-05'),
(2, 2, '2024-06-02', '2024-06-06');

-- Insert data into Service_Usage
INSERT INTO Service_Usage (reservation_id, service_id, quantity) VALUES
(1, 1, 2),
(2, 2, 1);

-- Insert data into Payments
INSERT INTO Payments (reservation_id, amount, payment_method) VALUES
(1, 400.00, 'credit_card'),
(2, 600.00, 'debit_card');





-- Query: Get all guests
SELECT * FROM Guests;

-- Query: Get all available rooms
SELECT * FROM Rooms WHERE status = 'available';

-- Query: Get reservation details by guest
SELECT g.first_name, g.last_name, r.room_id, r.check_in_date, r.check_out_date
FROM Reservations r
JOIN Guests g ON r.guest_id = g.guest_id
WHERE g.guest_id = 1;

-- Query: Get total service usage cost by reservation
SELECT su.reservation_id, SUM(su.quantity * s.price) AS total_service_cost
FROM Service_Usage su
JOIN Services s ON su.service_id = s.service_id
GROUP BY su.reservation_id;

-- Query: Get all payments made by a guest
SELECT p.payment_id, p.amount, p.payment_date, p.payment_method
FROM Payments p
JOIN Reservations r ON p.reservation_id = r.reservation_id
WHERE r.guest_id = 1;

-- Query: Find all guests who have stayed in the hotel more than once:
SELECT g.guest_id, g.first_name, g.last_name, COUNT(r.reservation_id) AS stay_count
FROM Guests g
JOIN Reservations r ON g.guest_id = r.guest_id
GROUP BY g.guest_id
HAVING stay_count > 1;

-- Query:  Find guests with upcoming reservations:
SELECT g.guest_id, g.first_name, g.last_name, r.check_in_date, r.check_out_date
FROM Guests g
JOIN Reservations r ON g.guest_id = r.guest_id
WHERE r.check_in_date > CURDATE();

-- Query:  Find all rooms that are currently occupied:
SELECT room_id, room_number, type
FROM Rooms
WHERE status = 'occupied';

-- Query: Find the total revenue generated by each room type:
SELECT type, SUM(r.price_per_night * DATEDIFF(res.check_out_date, res.check_in_date)) AS total_revenue
FROM Rooms r
JOIN Reservations res ON r.room_id = res.room_id
GROUP BY type;

-- Query: Find all reservations made within a specific date range:
SELECT r.reservation_id, g.first_name, g.last_name, r.check_in_date, r.check_out_date
FROM Reservations r
JOIN Guests g ON r.guest_id = g.guest_id
WHERE r.created_at BETWEEN '2024-05-01' AND '2024-05-31';

-- Query: Get the list of reservations with the corresponding room and guest details:
SELECT r.reservation_id, g.first_name, g.last_name, rm.room_number, r.check_in_date, r.check_out_date
FROM Reservations r
JOIN Guests g ON r.guest_id = g.guest_id
JOIN Rooms rm ON r.room_id = rm.room_id;


-- Query: Find the total amount spent on services by each guest:
SELECT g.guest_id, g.first_name, g.last_name, SUM(su.quantity * s.price) AS total_spent
FROM Guests g
JOIN Reservations r ON g.guest_id = r.guest_id
JOIN Service_Usage su ON r.reservation_id = su.reservation_id
JOIN Services s ON su.service_id = s.service_id
GROUP BY g.guest_id;


-- Query: Get details of services used by a specific guest:
SELECT g.first_name, g.last_name, s.name, su.quantity, s.price, (su.quantity * s.price) AS total_cost
FROM Guests g
JOIN Reservations r ON g.guest_id = r.guest_id
JOIN Service_Usage su ON r.reservation_id = su.reservation_id
JOIN Services s ON su.service_id = s.service_id
WHERE g.guest_id = 1;


-- Query: Find all payments made within the last month:
SELECT p.payment_id, g.first_name, g.last_name, p.amount, p.payment_date, p.payment_method
FROM Payments p
JOIN Reservations r ON p.reservation_id = r.reservation_id
JOIN Guests g ON r.guest_id = g.guest_id
WHERE p.payment_date > DATE_SUB(CURDATE(), INTERVAL 1 MONTH);

-- Query: Get the total revenue collected from each payment method:
SELECT p.payment_method, SUM(p.amount) AS total_revenue
FROM Payments p
GROUP BY p.payment_method;

-- Query: Find all payments made by a specific guest:
SELECT p.payment_id, p.amount, p.payment_date, p.payment_method
FROM Payments p
JOIN Reservations r ON p.reservation_id = r.reservation_id
WHERE r.guest_id = 1;

-- Query: Get the total amount spent by each guest:
SELECT g.guest_id, g.first_name, g.last_name, SUM(p.amount) AS total_spent
FROM Payments p
JOIN Reservations r ON p.reservation_id = r.reservation_id
JOIN Guests g ON r.guest_id = g.guest_id
GROUP BY g.guest_id;

-- Query: Find the total revenue collected in the current year:
SELECT YEAR(p.payment_date) AS year, SUM(p.amount) AS total_revenue
FROM Payments p
WHERE YEAR(p.payment_date) = YEAR(CURDATE())
GROUP BY YEAR(p.payment_date);

-- Query: Get the monthly revenue report for the current year:
SELECT MONTH(p.payment_date) AS month, SUM(p.amount) AS total_revenue
FROM Payments p
WHERE YEAR(p.payment_date) = YEAR(CURDATE())
GROUP BY MONTH(p.payment_date)
ORDER BY month;

-- Query: Find the number of payments made through each payment method:
SELECT p.payment_method, COUNT(p.payment_id) AS payment_count
FROM Payments p
GROUP BY p.payment_method;

-- Query: Get the highest payment made for a single reservation:
SELECT p.payment_id, p.reservation_id, p.amount, p.payment_date, p.payment_method
FROM Payments p
ORDER BY p.amount DESC
LIMIT 1;

-- Query: Find the average payment amount made by guests:
SELECT AVG(p.amount) AS average_payment
FROM Payments p;

-- Query: Get the details of payments made in the last week:
SELECT p.payment_id, g.first_name, g.last_name, p.amount, p.payment_date, p.payment_method
FROM Payments p
JOIN Reservations r ON p.reservation_id = r.reservation_id
JOIN Guests g ON r.guest_id = g.guest_id
WHERE p.payment_date > DATE_SUB(CURDATE(), INTERVAL 1 WEEK);
